{"ast":null,"code":"import { describe, PropTypes } from 'react-desc';\nimport { getAvailableAtBadge } from '../../utils';\nexport var doc = function doc(Grommet) {\n  var DocumentedGrommet = describe(Grommet).availableAt(getAvailableAtBadge('Grommet')).description('The top level Grommet container.').usage(\"import { Grommet } from 'grommet';\\n<Grommet>...</Grommet>\").intrinsicElement('div');\n  DocumentedGrommet.propTypes = {\n    full: PropTypes.bool.description('Whether to take the whole viewport.').defaultValue(false),\n    plain: PropTypes.bool.description(\"Whether or not Grommet should apply a global font-family, font-size, \\n        and line-height.\").defaultValue(false),\n    cssVars: PropTypes.bool.description('Whether to expose the css variables.').defaultValue(false),\n    theme: PropTypes.object.description('Custom styles for Grommet app component.'),\n    themeMode: PropTypes.oneOf(['dark', 'light']).description(\"Dark vs. light theme variation. Default is unspecified and left to\\n      theme.\"),\n    userAgent: PropTypes.string.description(\"User agent used to detect the device width for setting the initial \\n      breakpoint.\")\n  };\n  return DocumentedGrommet;\n};\nexport var themeDoc = {\n  'grommet.extend': {\n    description: 'Any additional style for Grommet.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'global.font.face': {\n    description: 'Custom font face declaration',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  }\n};","map":{"version":3,"sources":["/Users/Avelina/Projects/senior/cirr-graphs/node_modules/grommet/es6/components/Grommet/doc.js"],"names":["describe","PropTypes","getAvailableAtBadge","doc","Grommet","DocumentedGrommet","availableAt","description","usage","intrinsicElement","propTypes","full","bool","defaultValue","plain","cssVars","theme","object","themeMode","oneOf","userAgent","string","themeDoc","type","undefined"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,YAApC;AACA,SAASC,mBAAT,QAAoC,aAApC;AACA,OAAO,IAAIC,GAAG,GAAG,SAASA,GAAT,CAAaC,OAAb,EAAsB;AACrC,MAAIC,iBAAiB,GAAGL,QAAQ,CAACI,OAAD,CAAR,CAAkBE,WAAlB,CAA8BJ,mBAAmB,CAAC,SAAD,CAAjD,EAA8DK,WAA9D,CAA0E,kCAA1E,EAA8GC,KAA9G,CAAoH,4DAApH,EAAkLC,gBAAlL,CAAmM,KAAnM,CAAxB;AACAJ,EAAAA,iBAAiB,CAACK,SAAlB,GAA8B;AAC5BC,IAAAA,IAAI,EAAEV,SAAS,CAACW,IAAV,CAAeL,WAAf,CAA2B,qCAA3B,EAAkEM,YAAlE,CAA+E,KAA/E,CADsB;AAE5BC,IAAAA,KAAK,EAAEb,SAAS,CAACW,IAAV,CAAeL,WAAf,CAA2B,iGAA3B,EAA8HM,YAA9H,CAA2I,KAA3I,CAFqB;AAG5BE,IAAAA,OAAO,EAAEd,SAAS,CAACW,IAAV,CAAeL,WAAf,CAA2B,sCAA3B,EAAmEM,YAAnE,CAAgF,KAAhF,CAHmB;AAI5BG,IAAAA,KAAK,EAAEf,SAAS,CAACgB,MAAV,CAAiBV,WAAjB,CAA6B,0CAA7B,CAJqB;AAK5BW,IAAAA,SAAS,EAAEjB,SAAS,CAACkB,KAAV,CAAgB,CAAC,MAAD,EAAS,OAAT,CAAhB,EAAmCZ,WAAnC,CAA+C,kFAA/C,CALiB;AAM5Ba,IAAAA,SAAS,EAAEnB,SAAS,CAACoB,MAAV,CAAiBd,WAAjB,CAA6B,wFAA7B;AANiB,GAA9B;AAQA,SAAOF,iBAAP;AACD,CAXM;AAYP,OAAO,IAAIiB,QAAQ,GAAG;AACpB,oBAAkB;AAChBf,IAAAA,WAAW,EAAE,mCADG;AAEhBgB,IAAAA,IAAI,EAAE,wBAFU;AAGhBV,IAAAA,YAAY,EAAEW;AAHE,GADE;AAMpB,sBAAoB;AAClBjB,IAAAA,WAAW,EAAE,8BADK;AAElBgB,IAAAA,IAAI,EAAE,wBAFY;AAGlBV,IAAAA,YAAY,EAAEW;AAHI;AANA,CAAf","sourcesContent":["import { describe, PropTypes } from 'react-desc';\nimport { getAvailableAtBadge } from '../../utils';\nexport var doc = function doc(Grommet) {\n  var DocumentedGrommet = describe(Grommet).availableAt(getAvailableAtBadge('Grommet')).description('The top level Grommet container.').usage(\"import { Grommet } from 'grommet';\\n<Grommet>...</Grommet>\").intrinsicElement('div');\n  DocumentedGrommet.propTypes = {\n    full: PropTypes.bool.description('Whether to take the whole viewport.').defaultValue(false),\n    plain: PropTypes.bool.description(\"Whether or not Grommet should apply a global font-family, font-size, \\n        and line-height.\").defaultValue(false),\n    cssVars: PropTypes.bool.description('Whether to expose the css variables.').defaultValue(false),\n    theme: PropTypes.object.description('Custom styles for Grommet app component.'),\n    themeMode: PropTypes.oneOf(['dark', 'light']).description(\"Dark vs. light theme variation. Default is unspecified and left to\\n      theme.\"),\n    userAgent: PropTypes.string.description(\"User agent used to detect the device width for setting the initial \\n      breakpoint.\")\n  };\n  return DocumentedGrommet;\n};\nexport var themeDoc = {\n  'grommet.extend': {\n    description: 'Any additional style for Grommet.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'global.font.face': {\n    description: 'Custom font face declaration',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  }\n};"]},"metadata":{},"sourceType":"module"}