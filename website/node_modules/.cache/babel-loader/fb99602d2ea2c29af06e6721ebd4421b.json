{"ast":null,"code":"import { describe, PropTypes } from 'react-desc';\nimport { getAvailableAtBadge } from '../../utils';\nexport var doc = function doc(Form) {\n  var DocumentedForm = describe(Form).availableAt(getAvailableAtBadge('Form')).description('A form that manages state for its fields.').usage(\"import { Form } from 'grommet';\\n<Form />\").intrinsicElement('form');\n  DocumentedForm.propTypes = {\n    errors: PropTypes.shape({}).description(\"An object representing any errors in the data. They keys should\\n        match the keys in the value object.\").defaultValue({}),\n    messages: PropTypes.shape({\n      invalid: PropTypes.string,\n      required: PropTypes.string\n    }).description('Custom validation messages.').defaultValue({\n      invalid: 'invalid',\n      required: 'required'\n    }),\n    onChange: PropTypes.func.description('Function that will be called when any fields are updated.'),\n    onSubmit: PropTypes.func.description(\"Function that will be called when the form is submitted. The\\n      single argument is an event containing the latest value object\\n      via `event.value`.\"),\n    onReset: PropTypes.func.description(\"Function that will be called when the form is reset. The\\n      single argument is the event provided by react.\"),\n    value: PropTypes.shape({}).description('An object representing all of the data in the form.').defaultValue({})\n  };\n  return DocumentedForm;\n};","map":{"version":3,"sources":["/Users/Avelina/Projects/senior/cirr-graphs/node_modules/grommet/es6/components/Form/doc.js"],"names":["describe","PropTypes","getAvailableAtBadge","doc","Form","DocumentedForm","availableAt","description","usage","intrinsicElement","propTypes","errors","shape","defaultValue","messages","invalid","string","required","onChange","func","onSubmit","onReset","value"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,YAApC;AACA,SAASC,mBAAT,QAAoC,aAApC;AACA,OAAO,IAAIC,GAAG,GAAG,SAASA,GAAT,CAAaC,IAAb,EAAmB;AAClC,MAAIC,cAAc,GAAGL,QAAQ,CAACI,IAAD,CAAR,CAAeE,WAAf,CAA2BJ,mBAAmB,CAAC,MAAD,CAA9C,EAAwDK,WAAxD,CAAoE,2CAApE,EAAiHC,KAAjH,CAAuH,2CAAvH,EAAoKC,gBAApK,CAAqL,MAArL,CAArB;AACAJ,EAAAA,cAAc,CAACK,SAAf,GAA2B;AACzBC,IAAAA,MAAM,EAAEV,SAAS,CAACW,KAAV,CAAgB,EAAhB,EAAoBL,WAApB,CAAgC,8GAAhC,EAAgJM,YAAhJ,CAA6J,EAA7J,CADiB;AAEzBC,IAAAA,QAAQ,EAAEb,SAAS,CAACW,KAAV,CAAgB;AACxBG,MAAAA,OAAO,EAAEd,SAAS,CAACe,MADK;AAExBC,MAAAA,QAAQ,EAAEhB,SAAS,CAACe;AAFI,KAAhB,EAGPT,WAHO,CAGK,6BAHL,EAGoCM,YAHpC,CAGiD;AACzDE,MAAAA,OAAO,EAAE,SADgD;AAEzDE,MAAAA,QAAQ,EAAE;AAF+C,KAHjD,CAFe;AASzBC,IAAAA,QAAQ,EAAEjB,SAAS,CAACkB,IAAV,CAAeZ,WAAf,CAA2B,2DAA3B,CATe;AAUzBa,IAAAA,QAAQ,EAAEnB,SAAS,CAACkB,IAAV,CAAeZ,WAAf,CAA2B,8JAA3B,CAVe;AAWzBc,IAAAA,OAAO,EAAEpB,SAAS,CAACkB,IAAV,CAAeZ,WAAf,CAA2B,iHAA3B,CAXgB;AAYzBe,IAAAA,KAAK,EAAErB,SAAS,CAACW,KAAV,CAAgB,EAAhB,EAAoBL,WAApB,CAAgC,qDAAhC,EAAuFM,YAAvF,CAAoG,EAApG;AAZkB,GAA3B;AAcA,SAAOR,cAAP;AACD,CAjBM","sourcesContent":["import { describe, PropTypes } from 'react-desc';\nimport { getAvailableAtBadge } from '../../utils';\nexport var doc = function doc(Form) {\n  var DocumentedForm = describe(Form).availableAt(getAvailableAtBadge('Form')).description('A form that manages state for its fields.').usage(\"import { Form } from 'grommet';\\n<Form />\").intrinsicElement('form');\n  DocumentedForm.propTypes = {\n    errors: PropTypes.shape({}).description(\"An object representing any errors in the data. They keys should\\n        match the keys in the value object.\").defaultValue({}),\n    messages: PropTypes.shape({\n      invalid: PropTypes.string,\n      required: PropTypes.string\n    }).description('Custom validation messages.').defaultValue({\n      invalid: 'invalid',\n      required: 'required'\n    }),\n    onChange: PropTypes.func.description('Function that will be called when any fields are updated.'),\n    onSubmit: PropTypes.func.description(\"Function that will be called when the form is submitted. The\\n      single argument is an event containing the latest value object\\n      via `event.value`.\"),\n    onReset: PropTypes.func.description(\"Function that will be called when the form is reset. The\\n      single argument is the event provided by react.\"),\n    value: PropTypes.shape({}).description('An object representing all of the data in the form.').defaultValue({})\n  };\n  return DocumentedForm;\n};"]},"metadata":{},"sourceType":"module"}